import pandas as pd

from pytest_postgresql import factories
from pathlib import Path
from etl import etl
from sqlalchemy import create_engine

import json
from api.app import app


schema = """ 
    CREATE SCHEMA AUTHORIZATION engineer;
    CREATE SCHEMA IF NOT EXISTS rh AUTHORIZATION engineer;
    CREATE TABLE rh.company (
     id_company    integer PRIMARY KEY,
     company_name   varchar(100) NOT NULL CHECK (company_name <> ''),
     address   varchar(120),
     city   varchar(40),
     state   varchar(40),
     zip   varchar(5),
     phone1   varchar(13),
     phone2   varchar(13)
    );
    CREATE TABLE rh.department (
     id_department    integer PRIMARY KEY,
     department   varchar(100) NOT NULL CHECK (department <> '')
    );
    CREATE TABLE rh.employee (
     id_employee    integer PRIMARY KEY,
     first_name   varchar(40) NOT NULL CHECK (first_name <> ''),
     last_name   varchar(40) NOT NULL CHECK (last_name <> ''),
     email   varchar(40),
     id_company  integer,
     CONSTRAINT fk_company FOREIGN KEY (id_company)
     REFERENCES rh.company(id_company)
    );
    CREATE TABLE rh.employee_department(
     id_employee integer REFERENCES rh.employee(id_employee),
     id_department integer REFERENCES rh.department(id_department),
     CONSTRAINT employee_department_pk PRIMARY KEY(id_employee,id_department)
    );
    """

data_dummy = [
    [
        "James",
        "Butt",
        "Benton, John B Jr",
        "6649 N Blue Gum St",
        "New Orleans",
        "LA",
        "70116",
        "504-621-8927",
        "504-845-1427",
        "jbutt@gmail.com",
        "Sales",
    ],
    [
        "James",
        "Butt",
        "Benton, John B Jr",
        "6649 N Blue Gum St",
        "New Orleans",
        "LA",
        "70116",
        "504-621-8927",
        "504-845-1427",
        "jbutt@gmail.com",
        "Marketing",
    ],
    [
        "Josephine",
        "Darakjy",
        "Chanay, Jeffrey A Esq",
        "4 B Blue Ridge Blvd",
        "Brighton",
        "MI",
        "48116",
        "810-292-9388",
        "810-374-9840",
        "josephine_darakjy@darakjy.org",
        "Human Resources",
    ],
    [
        "Art",
        "Venere",
        "Chemel, James L Cpa",
        "8 W Cerritos Ave #54",
        "Bridgeport",
        "NJ",
        "8014",
        "856-636-8749",
        "856-264-4130",
        "art@venere.org",
        "Purchasing",
    ],
]


def test_example_postgres(postgresql, mocker):
    # We used the fake postgresql from fixture
    cur = postgresql.cursor()
    cur.execute(schema)
    postgresql.commit()

    data = pd.DataFrame(
        data_dummy,
        columns=[
            "first_name",
            "last_name",
            "company_name",
            "address",
            "city",
            "state",
            "zip",
            "phone1",
            "phone2",
            "email",
            "department",
        ],
    )
    conn_string = f"postgresql+psycopg2://{postgresql.info.user}:@{postgresql.info.host}:{postgresql.info.port}/{postgresql.info.dbname}"
    db = create_engine(conn_string)
    mocker.patch("etl.etl.db", db)

    etl.ingest_data(data)

    a = cur.execute("select max(id_company) from rh.company;")
    postgresql.commit()
    mocker.patch("api.app.get_connection", return_value=postgresql)

    response = app.test_client().get("/rows")
    cur.close()

    # Validate of the response and size of rows
    assert response.status_code == 200
    response_data = json.loads(response.data)
    assert len(response_data) == len(data_dummy)
